创建项目以及配置
1.1 创建项目&组织requirements.txt
    requirements.txt 放项目的依赖项
    ‘’‘
    -i http://pypti.doubanio.com/smiple/
    Django~=3.0
    -e .              # 表示从当前的setup.py中查找其他依赖项
    ’‘’
1.2 配置
拆分setting.py以满足不同环境的需求
    将setting.py拆成一个package，不同的配置分别定义不同的模块
    将setting.py定义成基类，不同的配置定义为子类
    创建文件夹setting
    创建文件__init__.py
    创建文件base.py    # 直接copy setting.py文件
    创建文件develop.py，product.py
        from .base import *   # 引入base中的所有配置
1.3.修改manage.py和typeidea/wigs.py,django启动时需要知道setting文件，实现开发环境使用develop.py,线上环境使用product.py
    profile = os.environ.get('TYPEIDEA_PROFILE','develop')
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'typeidea.settings.%s' % profile)
    #os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'typeidea.settings')

3.3 创建模型
    ORM（Object Relational Mapping）对象关系映射
        定义的类(对象)映射到对应的数据库的表上
        将数据库和关系的抽象成一种代码层面的类
        基本规则：model中字段的类型和MySQL中字段的类型相对应
        SQL语句对数据做增删改查操作对应QuerySet
    常用字段类型：这些类型都是python类
        数值型
        字符型
        日期类型
        关系类型：用来关联两张表
    参数：类型对象实例化传递的参数
    QuerySet使用
        在Model层中，Django通过Model增加一个objects属性类提供数据操作的接口
        支持链式调用
            链式调用：执行一个对象的方法得到的还是这个对象的，这样还可以继续执行这个对象的其他方法
            只有用到的时候才会DATABASE中取数据
        常用QuerySet接口
            支持链式调用的接口
            不支持链式调用的接口：返回的结果不是QuerySet对象，一般获取的结果不是集合，而是一条记录对应的对象或者记录某些字段的值
        进阶接口：
            defer()/only()
            一对多的关联关系 select_related()
            多对多关系  prefetch——related()
        常用的查询字段：
            Model.objects.filter(_查询字段=‘查询条件’)
        进阶查询：
            F表达式:数据库层面进行计算原子性操作，避免数据库出现竞争，
            Q表达式：构造查询条件
            聚类表达式
                Count
                Sum
                常常结合的两个操作：
                    annotate：增加属性
                    aggregate：直接计算
        原生SQL的接口
            Post.objects.raw('select * from blog')
